<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACebI1cn22O559xlOSea48yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgICABKBtjfSkjLXnpIy0/6BukPOgbowzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAgIACoG6Q8aWUvv+noc3/pJC4/6BukPOgbowzn2yOWp55mtCec5T3nnGT+p91
        lvWde5vJnm2MWZlmmQUAAAAAAAAAAAAAAACmeJOgoG2N/Z9sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59s
        jf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/oG+P+aWXwf+noc3/pIuy/59sjf+ehqf8mq/R/5jG
        6f+X0vX/mMbp/5qv0P+dhqf8n3WV5J9uiiUAAAAAAAAAAKBsjvzMsqr/0Les/9C3rP/Qt6z/0Les/9C3
        rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/CoaL/oXKS96WSuv+fc5b9najJ/pjL
        7v+fnbz/pISf/6R7l/+lhqL/oKDA/5fN8P+aqMv/nnSU9J1vkCcAAAAAn2yN/9e+s/+8l5//u5ee/9C3
        rP+md5L/0Les/7uXnv+7l57/0Les/6Z3kv/Qt6z/u5ee/7uXnv/Qt6z/pneS/9C3rP/CoaT+n2yN/52w
        y/2cxuP/o3iV/8afov/nyLL/7c61/+XEsf/BmaD/o3mW/5jC5P+ap8j/nnWX46pVqgOfbI3/583C/8ml
        rP/Jpaz/583C/6t9lv/nzcL/yaWs/8mlrP/nzcL/q32W/+fNwv/Jpaz/yaWs/+fNwv+rfZb/583C/86s
        sP+iiKb7m97z/6N4lv/iwrD/+d67//vhwf/85MX/++HB//neu//buav/pHmX/5fM8P+cg6P9oG2NXp9s
        jf/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv/nzcL/sYug/53A2f+gorv/yaOk//neu//958r//+3S///t0v//7dL/+uzZ//jfvv+/lp//oKLB/5mv
        0f+fd5jQoW6P8+LHv//nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv/nzcL/583C/+fNwv+idpT/nN/0/6N7mP/szrX/++LB///t0v//7dL//+3S///t0v/+7dP/++LB/+LC
        sP+lg5//mMjr/59wkfqfbY7S17e2/OfNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv/nzcL/583C/+fNwv/nzcL/583C/6Btjv+b6Pz/oHCQ//fcuv/85cb//+3S///t0v//7dL//+3S///t
        0v/85cX/79G2/6N5lv+X0PP/n2yN/55rjXm0iJzf583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv/nzML/0K2x/6x+l/+sfpf/z62w/+bMwf/nzcL/o3WT/5zf9P+jeZf/7tC1//rjxP/18+//9vHp///t
        0v//7dL/79fH/9Gsqf/lxLH/pYKe/5jI6/+fcJH6nHGOEqFtjubQr7Lu583C/+fNwv/nzcL/583C/+fN
        wv/nzML/0K2x/6x+l/+wgpr/2r3B/9q9wP+vgpr/rH2X/9e4tv+viJ//ncDZ/6Gctv/NqKf/+eHC//Py
        8v/18+///+3S/+/Yxv+ufpb/17Oq/8Scov+gnb3/ma/R/594mdEAAAAAoGyPO6BtjuzJpK3i583C/+fN
        wv/nzcL/583C/8+tsv+tgJr/2Lu///Le1v/y39b/8t/W//Le1v/Yur//276//8+tsf+iiqb/nNrv/6N3
        lP/nyLL/+ODC//rhxf+tfZX/p3aR/9Wxqf/hv6//o3eV/5fK7v+ehab8n22NYAAAAAAAAAAAnGqOJJ9t
        jceoepXa2bq48+fNwv/t183/8t/W//Lf1v/dwsP/tYyi/6Nykf+jcpH/tYyi/93Cw//y39b/8d3V/6qB
        m/+duNH/nMPb/6J1k//Lp6b/7c61/+/Rtv/rzLT/xqGk/6J2k/+bw+D/m63N/p50lOWSbZIHAAAAAAAA
        AAAAAAAA/wD/AZ5sjmGfbY7os4eb1+nUzv/y39b/xqOw/6p+mv/IwtX/2+r2/9vq9v/IwtT/qX2Z/8aj
        sf/y39b/3cLD/6Bujv+dt9H9nNft/6Gct/+ieJX/oXST/6N6l/+horv/nNzy/5y2z/ufcZDyoGuOKwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9wjxCea42RonCQ9rKGnO2th6P22+n0/97v+v/e7/r/3u/6/97v
        +v/b6PT/rIii+rWLn/2jcpD5oHCOmZ90lNWehqXzncLa/5vh9v+c4vf/m+H2/5zC2f+dhqXzn3OS2qJq
        jykAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbY1ioXGQ8tjj7//e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/Y4+//oXCQ9aBtjV4AAAAAgICAAqBsjVOfdpXBnnCR859wkfafcZLxn3WVwJ5s
        jVyAgIAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wD/AaJwj9LJwtX53u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/IwNP6oXGR0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbItAo3WU8N3t
        +f/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/93t+f+jdJTxoGyPOwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnmmPIp9t
        j9/Cs8jy3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/8GzyfSgbo/cnGuMHwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAChcJCxvq3D9N7v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/8Cw
        xvWhcZGuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAn2CACJ9sjv3b6vb/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3Or2/6BujvuZZpkFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACfcI8QoW6O+9rn8//e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/a5vL/oW6O+6J0iwsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbI2ooG6P+tzr9//e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/2+n0/6Btj/yleJiyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgcI/w2ufz/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/Q0eH/onGS0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqlWqA59sj/ywrdP/w8DZ/9PZ
        5//e7/r/3u/6/9zr9v/NzN3/xr3Q/76vxv++r8b/1N3s/7unwPGfa4yyn2uNSgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACidIsLoG6P+6eh
        zf+lkbr/pXua/9DR4f+yl7H/oHKT/6J6nf+igKX/o4Wr/6OFrP+nnMf/pZS9/6F0mP6fbI21AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICA
        gAKgbY/8pp/L/6ehzf+khqr/o3mb/6OLs/+mncj/p6HN/6ehzf+noc3/p6HN/6ehzf+noc3/pH+i+59t
        jWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKJ0lNalkbn/p6HN/6ehzf+noc3/p6HN/6ehzf+noc3/p6HN/6ehzf+noc3/p6HN/6SS
        u/+icpTrmWaZBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAnmuNTKJ0lPullL3/p5/L/6ehzf+noc3/p6HN/6ehzf+noc3/p6HN/6eh
        zf+llL3/oXKS+aBsjzsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoW2PVKJ1luGhcJH7pYSp/qWVvv+nnMf/p5/L/6ec
        x/+lkbv/pIKl/qFykvKga4w+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJlmjBSgcJGEo3WV5aFx
        kvefbo/9oXGQ+aR4mN+fcZB6lWqVDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//8////+H////gwfAAAABwAAAAMAAAABAAAAAQAAAAAAAAAAAAAAAIAA
        AACAAAAAwAAAAeAAAAH4AAAD/AAAB/8APB/+AB///gAf//wAD//4AAf/+AAH//gAB//4AAf//AAP//wA
        D//8AAf//AAP//wAD//+AB///wA////A//8=
</value>
  </data>
</root>