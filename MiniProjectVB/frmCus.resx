<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAoXyGqZ9tjf2fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59s
        jf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbY39on2GpwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbY39obpp/6G/Zv+hv2b/ob9m/6G/Zv+hv2b/ob9m/6G/
        Zv+hv2b/ob9m/6G/Zv+hv2b/ob9m/6G/Zv+hv2b/ob9m/6G/Zv+hv2b/ob9m/6G/Zv+hv2b/ob9m/6G5
        af+fboz9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9sjf+lw2r/oHiI/6G/Zv+gm3b/oJt2/6G/
        Zv+feIj/ob9m/6Cbdv+gm3b/ob9m/594iP+hv2b/oJt2/6Cbdv+hv2b/n3iI/6G/Zv+gm3b/oJt2/6G/
        Zv+geIj/psNq/59sjf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn26N+K7FdP+ifIj/r8py/6ij
        fv+oo37/r8py/6J8iP+vynL/qKN+/6ijfv+vynL/onyI/6/Kcv+oo37/qKN+/6/Kcv+ifIj/r8py/6ij
        fv+oo37/r8py/6J8iP+uxXT/n2yN/59sjf+fbI3/oGuP/p1vo7QAAAAAAAAAAAAAAAChc4virLh3/6/K
        cv+vynL/r8py/6/Kcv+vynL/r8py/6/Kcv+vynL/r8py/6/Kcv+vynL/r8py/6/Kcv+vynL/r8py/6/K
        cv+vynL/r8py/6/Kcv+vynL/r8py/6y2d/+ec5T/jmvd/45r3f+Pa9j/n2yP/AAAAAAAAAAAAAAAAKF3
        iY2mlIL+r8py/6/Kcv+vynL/r8py/6/Kcv+vynL/r8py/6/Kcv+vynL/r8py/6/Kcv+vynL/r8py/6/K
        cv+vynL/r8py/6/Kcv+vynL/r8py/6/Kcv+vynL/ppOC/5hxrf+Oa93/jmzd/5Fw4v+fbI3/n2yN/6Fs
        jv6ugpi0m2+QF59xi/Sstnj/r8py/6/Kcv+vynL/r8py/6/Kcv+vynL/r8py/8DWof/e7/r/3u/6/97v
        +v+/16D/r8py/6/Kcv+vynL/r8py/6/Kcv+vynL/r8py/6u1d/+gcY//mXfl/5l47f+ZeO3/mnfo/6Fw
        j//Qt6z/zLGq/6FtjvwAAAAAoW+KTKBxi/Srr3r+r8py/6/Kcv+vynL/r8py/6/Kcv+vynL/sMt0/7PQ
        dv+00Xf/s892/7DMc/+vynL/r8py/6/Kcv+vynL/r8py/6/Kcv+rr3n/n3GP/5t10f+ZeO3/mXjt/5l4
        7f+edsz/r4OZ/9G4rf/WvrP/oGyO/gAAAAAAAAAAnm6NOqBwjeqkjITyrsJ0/6/Kcv+vynL/sctz/7bU
        ef+40X7/sLCD/62lhf+wsIP/uNF+/7fUev+wy3P/r8py/6/Kcv+uwnT/pIuK/59wlP+adtf/mXjt/5l4
        7f+ZeO3/mnbd/6Nylf/VtbX/583C/9e4tv6gbo/hAAAAAAAAAAAAAAAAnXaJDaBtjZGgcI3zqaN9+bHL
        c/+513z/rqqE/6Fzj/2wkKn4u6e9/q+Pqfihc4/9sKqE/7nXfP+xy3T/qKJ//6BwkP+cc7j/mXjp/5l4
        7f+ZeO3/mXjs/51zwv+icJL/zqqv/+fNwv/gxL3/pnaS755sjHEAAAAAAAAAAAAAAAAAAAAAAAAAAJ1t
        jS+fcIvNo4KJ+qqZh/+ofpr21Nvq/97v+v/e7/r/3u/6/9Tb6f+nfZr3qZiG/6SCi/6je6b/taXk/6+e
        8f+aeu3/mXjt/5p33/+ic6L/rH+c/9y/uv/nzcL/z66x/KJxkPSgbI2J/wD/AQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAICAgAKgboyepnmX89nl8v/e7/r/3u/6/97v+v/e7/r/3u/6/9nk8f+leZb0s5m6/N7v
        +v/e7/r/3u/6/7KXuP+kgLj9pHaW/8S4zP/a3OT/0ba6/7iOn+qgb4/ln2yLQAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAmWaZCqFxkOnQ0uL/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/9DS
        4f+mepn/3Ov2/97v+v/e7/r/zs/f/6R3lf/GvtH/3u/6/9bd6/+mepn+onKR1Z12iQ0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbY1lr46p7N7v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/7GSrv/GvND/3u/6/97v+v/e7/r/zs/f/6Z6mf/b6fX/3u/6/9bf7f+icpP6omyLIQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKJzk7/JxNb/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/yMLV/7KTrf/e7/r/3u/6/97v+v/e7/r/tZmy/8S5zf/e7/r/3u/6/7+v
        xP+nfZupAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoHGR8Nfi7//e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/X4e7/pnqY/97v+v/e7/r/3u/6/97v+v/Kxdf/s5Wu/97v
        +v/e7/r/0NLi/6Z6md8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbY393e35/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/93t+f+gbo7/3u/6/97v+v/e7/r/3u/6/9PX
        5v+shqL/3u/6/97v+v/X4e7/pHSU8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBs
        jv7d7fn/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3e35/6Bvj//e7/r/3u/6/97v
        +v/e7/r/0tbm/62Ipf/e7/r/3u/6/9DT4v+keJbbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAoXGR8dfh7//e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/X4O7/qICd/97v
        +v/e7/r/3u/6/97v+v/Hv9L/t521/97v+v/e7vr/spOu86N0kncAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACjdJWyxrvO/t7v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/8S5
        zf+2nLX/3u/6/97v+v/e7/r/3Or2/6iAnf/Ny9z/1t/t/7SZs/Kjc5PPqoCABgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9qjzCleZfz2+n0/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/a5/P/p3ya/9LX5v/e7/r/3u/6/9vp9P+zlrD5o3KS86FwkfWjdJTnoXKSiKJ0iwsAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKN0k5Oti6b02ufz/97v+v/e7/r/3u/6/97v
        +v/e7/r/2ufz/62Jp/Wgbo79r42p9rynvve2mrT0onOT9qN1lKSfYIAIAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wD/AaFzkZWjdpTzxbnN/Nfh
        7//a5vL/1+Hv/8S5zfykdpXzo3KRm512iQ2ebYxUnmyNdJ9sjmqha40mAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ5u
        jTqgcpCvonGR66BvkPSic5LnonGRpZ1sjjQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////8AAAB/AAAAfwAAAH8AAAAHAAAABwAAAACAAAAAwAAAAOAA
        AADwAAAB/AAAAf4AAAf+AAAP/gAAD/wAAAf8AAAH/AAAB/wAAAf8AAAP/AAAD/4AAB/+AAH//wB////B
        //////////////////////////////////8=
</value>
  </data>
</root>