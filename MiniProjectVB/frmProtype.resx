<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACic49SoW6O9p9sjf+fbI3/oG+P9aNyk04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKh4lOTQrrL/48a+/+PGvv/QrbH/qHiU4gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACZZpkKom+Q/OXKwP/nzcL/583C/+PJv/+hb4/9mWaZCgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkm2SB6Rz
        kq2oeJTztY2fqJlmmQUAAAAAAAAAALOInV6yhZz+583C/+fNwv/nzcL/583C/7CDmf6neJRRAAAAAAAA
        AACqgIAGrYCYkqVykOqkco+qkm2SBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJJt
        kgejcZC/toyh+d3FxP+1jKH/qnuX+bWMn2iha5QTr4Ka1cWkr//oz8T/583C/+fNwv/nzcL/wZun/6l6
        lMOha5QTr36YWaZ1kvG0iJz/2Li3/7OInPWjcY+/km2SBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAApHKQqLWLn/nly8H/6tbK/+3d0//Vur7/qXuW/6JvkP65kaT/5tPN/+zb0f/oz8T/583C/+fN
        wv/gxL3/toue/aFvjvyoeZT90bCy/+fNwv/nzcL/5cvB/7SHnPWkcpClAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACmdpPz3sfG/+rWyv/nzcL/6tbL/+3d0//r29L/6NbP/+3d0//t3dP/7d3T/+zb
        0f/oz8T/583C/+fNwv/nzcL/48e//+XLwf/nzcL/583C/+fNwv/nzcL/17i2/6N0keoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALaMoai1jKH/7d3T/+rVy//nzcL/69nQ/+3d0//t3dP/7d3T/+3d
        0//t3dP/7d3T/+zb0f/oz8T/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv+zh5z+roCYkAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2CACKh4lPnXvb//7d3T//Hm5P/07/P/69nQ/+3d
        0//m0sz/6NXN/+TSx//Eo6r/xKOq/+TRx//QrbL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/0a+y/6Z1
        kfKSbZIHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsIGbV6l5lf7r29L/7uHZ//Hl
        4//nzcL/zq60/6NykP/EpKb/0Les/7yYn/+8mJ//x6mn/6Z3kv/exbr/583C/+fNwv/nzcL/583C/+XL
        wf+nd5P9sYGZVQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfcI8QonCQ+ubQ
        yP/t3dP/7d3T/8+vtP+mdZL/xael/9C3rP/Qt6z/0Les/9C3rP/Msar/x6mn/8Wmpf+mdZL/5szC/+fN
        wv/nzcL/48i//6Jwj/mkbZIOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkbZIOroKcYq+C
        mdi6kqP+583C/+rWy//l0cz/pHKR/8Wnpf/Qt6z/y66p/6yFm/+gcJD/oHGQ/6yGmv/Krqj/w6Sj/8Wn
        pf/exbn/583C/+fNwv/nzcL/uY+h+6t7l7yogJdMmWaZCgAAAAAAAAAAAAAAAAAAAACico1Vp3eT5aFv
        jv2vg5n/xaGu/+bSzP/q1Mr/583C/8CbqP+0i5v/0Les/8irp/+hdJP/mKfF/5DU8P+Q1PD/mKfF/6F0
        kv/Krqj/x6mn/6yAlv/Nq6//583C/+fNwv/ixr//wpun/7CDmf6hb479p3eT46dyk04AAAAAAAAAAKBv
        j/XRr7H/5MnA/+fNwv/oz8X/7dvR/+3d0//q1Mr/qHqU/8Slpf/Qt6z/rIWZ/5inxf+P3fn/j935/4/d
        +f+P3fn/mKfE/62Gm//Hqab/wJ6i/+POxf/oz8T/583C/+fNwv/nzcL/583C/+TJwP/RsLL/om+P9AAA
        AAAAAAAAn2yN/+bMwf/nzcL/583C/+fNwv/oz8X/7dvR/+zc0v+gbY7/zLGq/9C3rP+hcJD/kdLv/4/d
        +f+ch6f/m4io/4/d+f+Q0e7/oHGQ/9C3rP+8mJ//xaSs/+zb0f/oz8T/583C/+fNwv/nzcL/583C/+fM
        wv+fbI3/AAAAAAAAAACfbI3/5szB/+fNwv/nzcL/583C/+fNwv/oz8X/7dvR/6Ftjv/Nsqr/0Les/6Bw
        kP+Q0e7/j935/5uIqP+bian/j935/5HR7v+hcpH/0Les/7qVnv/Doqr/7d3T/+zb0f/oz8T/583C/+fN
        wv/nzcL/58zC/59sjf8AAAAAAAAAAKFvj/XRsLL/5MnA/+fNwv/nzcL/583C/+fNwv/oz8X/qnyW/8Sk
        pP/Qt6z/rIWb/5inxf+P3fn/j935/4/d+f+P3fn/mKfE/62Gm//Msar/x6qm/+TSyP/t3dP/7d3T/+zb
        0f/oz8T/583C/+TJwP/RrrH/om+P9AAAAAAAAAAAo3SRVqh4lOShb479r4KY/8Kbpv/ixr//583C/+fN
        wv/Amab/tIya/9C3rP/Lrqn/onSS/5inxf+Rz+z/kc/s/5inxf+hdJL/yq6o/8Wnpf+nd5L/1Li8/+3d
        0//t3dP/5tTN/8Whrv+vgpn/oW+O/ad3k+WlcpNVAAAAAAAAAAAAAAAAAAAAAJlmmQqpfphNqnuWvbiO
        n/znzcL/583C/9/CvP+icI//xqem/9C3rP/Lrqn/rIWb/6F0kv+hdJL/q4aa/8msqP/BoaP/xael/+DM
        wv/t3dP/7d3T/+3d0/+7lKb/r4OZ2K6CnGKkbZIOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACkbZIOonCP+uPJv//nzcL/583C/82rsP+lc5D/xKWl/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/8Sl
        pf+mdZL/6dPL/+3d0//t3tT/6dfP/6Nykf2ZZogPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKp7l1Gnd5P95cvB/+fNwv/nzcL/583C/86rsP+kc5D/somZ/8eqp//Qt6z/0Las/8ao
        pv/Ps63/4M3C/+rUyf/nzcL/7d7Y//Tt7f/r29L/qHmV/7WGn10AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAgIAEqXiU7M6ssP/nzcL/583C/+fNwv/nzcL/583C/+DEvf/Amab/upOj/+DM
        wf/AnKX/q32W/9a4uf/t3dP/7d3T/+rUyf/nzcL/7NrS/+3d0//St7v/q36Y96pVqgMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAK2AmZOyhpv/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv/oz8X/7dvR/+3d0//q1Mn/583C/+rWy//t3dP/7d3T/+rUyf/nzcL/6tXL/+3d0/+1jKH/t4ygqQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApHOR7Ni5t//nzcL/583C/+fNwv/nzcL/5crA/+PH
        v//nzcL/583C/+fNwv/p0sr/8unm/+3d0//q1Mn/583C/+jSyf/r29H/7d3T/+rUyf/nzcL/6tXL/93G
        xf+neJT0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACjcZGrs4id9uXLwf/nzcL/583C/86r
        sP+ldJL+oW+O/LaMnv3hxb7/6dPL//Xw9P/39/7/8unn/+jVzv+4kKH9oW6P/Kd2lP7Strv/7d3T/+rU
        yf/ly8H/toyg+qZ3lLIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJJtkgejcZC/s4md9ti5
        t/+yhZr/p3aT8K6Al1iha5QTqXqUxMKbpv/nzcL/7d3Z//Tv8//p0sn/xqaw/6+Em9aha5QTroCXWKl5
        lfe0ip//3cXE/7aMn/qjcZC/km2SBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJJt
        kgejcZGrpHKQ762AmJKqgIAGAAAAAAAAAACqfJVUsIOZ/+fNwv/nzcL/6dPK/+fNwv+yh5z+somcXQAA
        AAAAAAAAqoCABq5/l5GkcpDvpHKQqpJtkgcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKRtkg6icI795crA/+fNwv/nzcL/5cvB/6Nx
        kPyddokNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKl4k+PQrrL/583C/+fN
        wv/TsbP/p3iT4wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoXGRUaJv
        j/OfbI3/n2yN/6Jvj/Ojc49QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////8P///+B////gf//x4Hj/4MAwf8AAAD/AAAA/wAAAP+AAAH/wA
        AD/8AAA/+AAAH8AAAAOAAAABgAAAAYAAAAGAAAABwAAAA/gAAB/8AAA//AAAP/gAAB/wAAAP8AAAD/AA
        AA/4MAwf/HgeP//4H///+B////w///////8=
</value>
  </data>
</root>