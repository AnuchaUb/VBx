<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        GB//wAA///AAf//4AP///gH///+D////z/8=
</value>
  </data>
</root>