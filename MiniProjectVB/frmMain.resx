<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2yN3Z9sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59s
        jf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59s
        jf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjdwAAAAAAAAAAAAAAAAAAAAAAAAAAJ9sjf+P3fn/j935/4/d
        +f+P3fn/j935/4/d+f+P3fn/j935/59sjf+ZeO3/mXjt/5l47f+ZeO3/mXjt/59sjf+P3fn/j935/4/d
        +f+P3fn/j935/4/d+f+P3fn/j935/59sjf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2yN/4/d
        +f+dfJz/j935/5aty/+Wrcv/j935/518nP+P3fn/n2yN/5l47f+ZeO3/mXjt/5l47f+ZeO3/n2yN/4/d
        +f+dfJz/j935/5aty/+Wrcv/j935/518nP+P3fn/n2yN/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACfbI3/j935/517m/+P3fn/lqzK/5asyv+P3fn/nXub/4/d+f+fbI3/mXjt/5l47f+ZeO3/mXjt/5l4
        7f+fbI3/j935/517m/+P3fn/lqzK/5asyv+P3fn/nXub/4/d+f+fbI3/AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJ9sjf+P3fn/j935/4/d+f+P3fn/j935/4/d+f+P3fn/j935/59sjf+ZeO3/mXjt/5l4
        7f+cdMr/mXjt/59sjf+P3fn/j935/4/d+f+P3fn/j935/4/d+f+P3fn/j935/59sjf8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAn2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/5l4
        7f+ZeO3/mXjt/59sjf+ZeO3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbI3/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v+fbI3/mXjt/5l47f+ZeO3/m3TK/5l47f+fbI3/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v+fbI3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9sjf/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/59sjf+ZeO3/mXjt/5l47f+ZeO3/mXjt/59sjf/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/59sjf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2yN/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/n2yN/5l47f+ZeO3/mXjt/5l47f+ZeO3/n2yN/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/n2yN/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbI3/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v+fbI3/mXjt/5l47f+ZeO3/mXjt/5l47f+fbI3/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v+fbI3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9s
        jf/V6fb/3e76/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/6qFqP+fbI3/n2yN/59sjf+fbI3/n2yN/6uG
        qf/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7vr/1un3/59sjf8AAAAAAAAAAAAAAAAAAAAAAAAAAKBu
        kbueb5LFn2yN/77Y7//G3fL/2+34/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/2+35/8be8v++2O//n2yN/6BvkMagb5GzAAAAAAAA
        AAAAAAAAn2yN/6SJsPugbY7+t73X/77Y7//B2vD/2Ov4/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/9nr+P/D2/D/vtjv/7e91/+fbI3/pIeu+59t
        j/gAAAAAAAAAAAAAAACgbY77p57J/6SSu/+hcpP7sq3I/77Y7//A2fD/1en2/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/W6vf/wNrw/77Y7/+yrcf/oXCS/KWQ
        uf+nn8r/n22O9wAAAAAAAAAAAAAAAJ9wkZKgdJb0ppvG/6WZxP+hdJb5rJm2/73X7f+/2O//0OX1/97v
        +v/e7/r/3u/6/97v+v/P0OD/wrXJ/8/Q4P/e7/r/3u/6/97v+v/e7/r/0eX2/77Z7/+91+3/rJi1/6Bz
        lfqmmML/p5zH/6B0mO+gb5COAAAAAAAAAAAAAAAAAAAAAJ9tkIWgcJL0ppfB/6ecx/+ieZv3qIyp/bzT
        6v++2O//yuHz/93u+v/e7/r/w7XJ/7OKnv/Srqn/s4md/8S2yv/e7/r/3u76/8zi9P++2O//vNPq/6mM
        qv2hd5r3ppzH/6WYwv+gcZPxn22OegAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKJtj1Kfbo/1pZC4/qeg
        zP+igab3pHyc/LrJ4f++2O//xt7y/9zt+f+oe5f/9Nm4//neu//02Ln/qHyY/9vt+f/G3vL/vtjv/7rJ
        4f+je5v9on2i+Kefy/+lkbr9oG+S8KBsjU4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBu
        jDOgbpDso4eu+aegzf+kirH8oXOV/Le+2P++2O//wtvw/6h7l//02bj/+d67//TYuf+ofJj/w9vx/77Y
        7/+3vdf/oXOU/aOIr/ynoc3/o4mw9aBukOSebYwqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJlmjBSfbI3/oXqd9aaeyf+llb7/oXKT+7Cnwv++2O//s6rD/7KKnv/Rr6v/s4md/7Oq
        xP++2O//sabB/6FykvullL3/p5/K/6J7ofOgb5DBpG2SDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9sjf+fb5Can3SV9aWZxP+mm8b/oXaY+KuUsf691Ov/t77Y/7Ss
        xf+3vtj/vdTr/6uUsf6hdZj4pprF/6aaxf+gdJbyoXCRkqpVqgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2yN/wAAAACfbI3/oG+R9qWTvP+mn8v/on2h96WC
        of27zub/vtjv/7vO5v+mgqH9oXyg96afyv+llb//oG+R86BukWEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbI3/AAAAAJ9sjf+ebItCn26P8qOK
        sf2noM3/o4it+qJ2l/2ysMv/onaX/aOEq/mnocz/o4y0/Z9ukO6ha485AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9sjf8AAAAAoGyN0wAA
        AACeaY8ioG6Q3KKBpfSnoMz/pZC5/6F5nfikj7f+p6DN/6ODqPSfbpHZnmqNHQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2yN/wAA
        AAAAAAAAAAAAAAAAAAClaYcRoG+QwaF6nvGmn8r/p6HN/6aeyv+he5/xn2+Sv5lmiA8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACgbI3TAAAAAAAAAAAAAAAAAAAAAAAAAAD/AP8BnmyPhqBxlPKkjbb/oHKU8aBuj4T/AP8BAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoGyNTp9vkbWfbY5NAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////gAAAA+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AA
        AA/gAAAP4AAAD+AAAA+AAAADgAAAA4AAAAOAAAADwAAAD/AAAB/4AAA//AAAf/wAAP/9AAP//UAH//1g
        D//98B///fg////+//////////////////8=
</value>
  </data>
</root>