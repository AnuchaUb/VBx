<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKh6lKegbI7+n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59s
        jf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/6Bsjv6qepOlAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAn22O/cyyqv/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3
        rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/zLGq/6Bu
        jf0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbI3/176z/7yXn/+7l57/0Les/6Z3kv/Qt6z/u5ee/7uX
        nv/Qt6z/pneS/9C3rP+7l57/u5ee/9C3rP+md5L/0Les/7uXnv+7l57/0Les/6Z3kv/Qt6z/u5ee/7yX
        n//Xv7P/n2yN/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9sjf/nzcL/yaWs/8mlrP/nzcL/q32W/+fN
        wv/Jpaz/yaWs/+fNwv+rfZb/583C/8mlrP/Jpaz/583C/6t9lv/nzcL/yaWs/8mlrP/nzcL/q32W/+fN
        wv/Jpaz/yaWs/+fNwv+fbI3/n2yN/59sjf+fbI3/n2yN/59sjv2gbZSRn2yN/+fNwv/nzcL/583C/+fN
        wv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv/nzcL/583C/+fNwv/nzcL/583C/59sjf+ZeO3/mXjt/5l47f+ZeO3/mnfm/6Btjvuhbo734se//+fN
        wv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/jx7//oW6R/JxzxP+cc8T/mXjt/55tm/+ZeO3/n2yN/6Nz
        kdzXt7f/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/9e3tv+ic5z6m3PF/5tzxf+ZeO3/nm6d/5p4
        6v+ebY77oW6PfbmOn/fnzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fMwv/QrbH/rX+Y/61/
        mP/PrbD/5szB/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/t42h/Z10v/+ZeO3/mXjt/5l4
        7f+ZeO3/mnXY/59sk+GccY4SonCP7dGwsv/nzcL/583C/+fNwv/nzcL/583C/+fMwv/QrbH/rH6X/7CC
        mv/avcH/2r3B/6+Bm/+sfpf/z62w/+bMwf/nzcL/583C/+fNwv/nzcL/583C/9Gwsv+hcZb/mnfm/5l4
        7f+ZeO3/mXjt/5l47f+dcK74oG2QgQAAAACgbI87onCQ88yorv3nzcL/583C/+fNwv/nzcL/z62y/62A
        mv/Yu7//8t7W//Lf1v/y39b/8t7W/9i7v/+ugZr/z62y/+fNwv/nzcL/583C/+fNwv/MqbD+oXGU/5t1
        2P+ZeO3/mXjt/5l47f+ZeO3/m3LB/Z5tkeiddokNAAAAAAAAAACcao4kpHKR0q+CmfLau7j/583C/+3X
        zf/y39b/8t/W/93Cw/+0jKL/o3KR/6Nykf+0jKL/3cLD//Lf1v/y39b/7dfN/+fNwv/Zu7j/rYGc/aFz
        oP+ad9//mXjt/5l47f+ZeO3/mnfk/51vqfefbZHhnGqOJAAAAAAAAAAAAAAAAAAAAAD/AP8BoW6OX6Nx
        kO66kaD46dTO//Le1v/ForH/qHuZ/8e/0v/a5vL/2uby/8e/0v+oe5n/xqOx//Lf1v/p0s3/upKj+qJx
        lP2ddMj/mXjt/5l47f+ZeO3/mXjt/5tzx/6fbJL3oG2Sk5lmmQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAonSLC6NzkY6kdJH5toyh/q2Hov/Z5vL/3u/6/97v+v/e7/r/3u/6/9nl8v+thqH/toyh/qNz
        k/67pr3/09zy/bCc3v+ad9//mXjt/5l24P+db6T5n2yR7KFtjjYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ5sjVykdpb32eTx/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/9nk
        8f+keJf8x7/S/97v+v/e7/r/y8fZ/6N0lf+dda7/oHCT/KSUsfyhepr2oHWV6qB3mZadbI40/wD/AQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AP8Bo3ST2cjC1f/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/8jC1P+siKT/3u/6/97v+v/e7/r/1+Lv/6eEof+mor7/ruP5/67j+f+s1e3/pqrG/6F5
        mPigbIx2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ5si0Kne5rw3u76/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u76/6qBn//Oz9//3u/6/97v+v/e7/r/1+Hu/6N2lv+t2O//ruP5/67j
        +f+u4vn/ooWj8p5rjGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACeaY8ionGR5MO2yvze7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/wrbK/6h/nf/W3+3/3u/6/97v+v/e7/r/vKe//6ib
        t/+u4/n/ruP5/6i20f6fc5PQgICAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKNylLXCs8j83u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/wbPI/7SZsf/e7/r/3u/6/97v
        +v/c6vb/p4Ge/6vG3v+u4fj/oXaX+Z1sjjQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACSbZIHoG+P+9zr
        9//e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/c6vb/oXCQ/93s
        9//e7/r/3u/6/97v+v+2pb7/qLDL/6rG3v+hd5jjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKRt
        kg6gbpD62OPv/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/9fi
        7/+hcJH/2+n1/97v+v/e7/r/2+n1/6R7mf+rzeX/pafC/6B3lpQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKJykrCgbo793ez3/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/b6fX/oG+Q/7abtP/d7fn/2OPv/9PZ5//Hv9L/pomn/67j+f+jh6bzoGyNTgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFykfLb6PT/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/9DS4f+siKX/0ev5/7axyf+id5b/pYGg/6WEo/+nr8r/ruH4/59wj/mZZowUAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgIACoG6P/LCs1P/Cv9j/09nn/97v+v/e7/r/3Ov2/83M
        3f/GvdH/vq/G/76vxv/U3ez/vKvC/6WQrf+qwNr/ruP5/67j+f+u4/n/ruP5/67j+f+rzOP/oHGS4wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJlmmQqhb4/7p6HN/6WRuv+lepr/z9Dg/7GW
        sf+hcZL/onqc/6KApf+jhav/o4Ws/6ecx/+llL7/oHWX/6WNqv+u4/n/ruP5/67j+f+u4/n/ruP5/6We
        ufGebY6MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAAqBtj/ymn8v/p6HN/6OF
        qv+jepv/o4iv/6abxv+noc3/p6HN/6ehzf+noc3/p6HN/6ehzf+kf6P/qLLN/67j+f+u4/n/ruP5/67j
        +f+ry+P/n3CP8p5qjR0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAonaV2aWR
        uf+noc3/p6HN/6ehzf+noc3/p6HN/6ehzf+noc3/p6HN/6ehzf+noc3/pJK7/6J5mv+u3/X/ruP5/67j
        +f+u4/n/q8nh/6Byk/GgbYxbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACea41MonSU+6WUvf+nn8v/p6HN/6ehzf+noc3/p6HN/6ehzf+noc3/p6HN/6WUvf+hdZb/q8jh/67j
        +f+s0un/qLjS/6SSsO6fb4/yn2yNVQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAChbY9UonaX46FwkfulhKn+pZW+/6ecx/+nn8v/p5zH/6WRu/+kgaX+oXKT86Bz
        k+efbpD6oHOT755uj+ugcZGsnmuNaZ9wjxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmWaMFKJwk4SjdZXloXGS959sjf+fbY79o3aY3qBy
        kXSZZpkKAAAAAKRtkg6laYcRgICABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////wAAAD8AAAA/AAAAPwAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAMAA
        AAHgAAAD+AAAB/wAAB//AAAH/gAAA/4AAAP8AAAD+AAAB/gAAAf4AAAH+AAAD/wAAA/8AAAP/AAAD/wA
        AB/8AAA//gAAf/8AAf//wP////////////8=
</value>
  </data>
</root>