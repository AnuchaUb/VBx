<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAoG2NbqBtjvyfbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59s
        jf+fbI3/n2yN/59sjf+fbI3/o3aV2Z9wjxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAChb5Hh0tbl/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v+wj6r9om2PUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKJwkdLR1OT/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/62JpPqfbY49AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoG6OssvG2P7e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/Y4+//pHWU+p9sjG+fa41wn26PjaJ0
        k7Wjd5XFpHaWhp9ggAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbIyVw7XJ8t7v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/qoOg/6d8mv+siaT6spKs7bmj
        uvTDtsv+ysTX/83L3P+zlK/7pnyarwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9t
        jHq6pLvo3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/9rn8/+hcZH5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAn22NYLGSrePe7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/9zr9/+yk6v/oW+P/7OVrf/c6/f/3u/6/59sjf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACfa4xFqoSg5N7v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/1+Lv/8/Q4P/Jw9b/uKG5/66Emf/Os6v/rYSZ/8a90P/e7/r/n2yN/wAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ1tjS+mepno3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3e35/7mhuf+jdZX/rYqm/7OXsP+xkaz/roSZ/8yxqv+thJn/xr3R/97v+v+fbI3/AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnm2OP6l+nebe7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/Jwtb/q4Wh/9vq9v/e7/r/3u/6/9zr9/+zlK7/o3SS/7OUrv/c6/f/3u/6/59s
        jf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgbI6OvanB7d7v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/7KTrf/Hv9L/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/onCS/J9rjEWfaooYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqnGOCaBvj/DX4O7/3u/6/97v
        +v/e7/r/3u/6/97u+v/HwNL/poCb/59ujv+fbo7/n22O/8e/0f/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/IwdP/q4Wi9aN2lfWnepm2AAAAAAAAAAAAAAAAAAAAAAAAAACfbY1iroym5t7v
        +v/e7/r/3u/6/97v+v/d7Pf/rY2n/5xyi/+Pe4L/ioB//4qAf/+Qe4L/m3KL/66Qqf/d7fj/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/xr7S/6h+ncoAAAAAAAAAAAAAAAAAAAAAAAAAAKBu
        kcLLxtn83u/6/97v+v/e7/r/3u/6/7Sds/+ZdIn/iYF+/4mBfv+JgX7/iYF+/4mBfv+JgX7/mXSJ/7af
        tf/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v+xkq38onaVYwAAAAAAAAAAAAAAAAAA
        AACfcI8QoG+P9tvq9v/e7/r/3u/6/97v+v/X4O7/n3CO/4p/f/+JgX7/k3yK/55xkP+ecZD/k3yJ/4mB
        fv+KgH//n3CO/9fi7//e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/2ufz/6FxkPukbZIOAAAAAAAA
        AAAAAAAAAAAAAJ9sjVWtiKTl3u/6/97v+v/e7/r/3u/6/8W7z/+YdIn/iYF+/498gf+de5r/m9vx/5zc
        8f+eepn/jnyB/4mBfv+ZdIn/yMLV/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/GvtL/qH6bywAA
        AAAAAAAAAAAAAAAAAAAAAAAAoGyNhr2owOve7/r/3u/6/97v+v/e7/r/wLHG/5h5iv+Qh4T/ln2L/56m
        wf+b6///m+v//52lwP+XfIr/kIeE/5h5iv/Bssf/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/7CR
        rP2meJZkAAAAAAAAAAAAAAAAAAAAAAAAAACgbY+2ysXY/d7v+v/e7/r/3u/6/97v+v/GvtH/n32R/5iO
        i/+ahYv/nnya/5vZ7/+b2e//n3uZ/5qFi/+Yjov/oHyS/8e/0v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/a5/P/oXGQ+6Rtkg4AAAAAAAAAAAAAAAAAAAAAAAAAAKFwkeDU2+n/3u/6/97v+v/e7/r/3u/6/9fi
        7/+hcpD/mIyL/5iOi/+cgpD/n3ST/590k/+bgpD/mI6L/5iMi/+hc5H/2OPv/97v+v/e7/r/3u/6/97v
        +v/e7/r/3u/6/8a+0v+ofpvLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoW+Q7tnj8P/e7/r/3u/6/97v
        +v/e7/r/3u/6/7eguP+fe5H/mI6L/5iOi/+Yjov/mI6L/5iOi/+Yjov/oHuR/7iiuf/e7/r/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/sJGs/aZ4lmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgbY763Ov3/97v
        +v/e7/r/3u/6/97v+v/e7/r/3Ov3/7CSq/+heJL/moSM/5mLjP+Zi4z/moSL/6F4kv+xkq3/3Ov3/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97u+v+icJH8n3CPEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBt
        j/bb6vb/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u76/59sjf+rgJj/onKQ/6JykP+rgJj/n2yN/97u
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/2OPw/6N0k/UAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAoW+R4dbf7f/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/n2yN/9C3rP/Qt6z/0Les/9C3
        rP+fbI3/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/Q0+L/pnua4AAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACgbo+5ycHV+97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v+fbI3/0Les/6d3
        kf+neJL/0Les/59sjf/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/8Cwxf+ofpysAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9tjWWwkKzm3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/59s
        jf/Qt6z/0Les/9C3rP/Qt6z/n2yN/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7vr/qoOf+qBv
        kD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoWuUE6FvkPHX4u//3u/6/97v+v/e7/r/3u/6/97v
        +v/e7/r/n2yN/9S6r/+8mJ//vJif/9S6r/+fbI3/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/8vH
        2f+leJfogICAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoW2Nd6+Pqeze7/r/4vH7/+z1
        /v/p9P3/4PD6/97v+v+fbI3/583C/8ehqv/Hoqr/583C/59sjf/e7/r/3u/6/97v+v/l8vz/6/X+/+bz
        /P/a5vL/pnmZ+qRzlkkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACqgIAGoXGQy76u
        xPHt9v7/8Pf///D3///v9v//6PP9/59sjf/nzcL/583C/+fNwv/nzcL/n2yN/+Dw+//m8/z/7fb+//D3
        ///w9///7fH7/6+OqfqmepmjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACfcI8QoXGR18SwxPzu9f3/8Pf///D3///w9///n2yN/+fNwv+qepX/qnuV/+fNwv+fbI3/8Pf///D3
        ///w9///8Pf//+jo8/+xjKf+pnuatYCAgAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACddokNo3WWsqyEoffa0uH/8Pf///D3//+fbI3/583C/+fNwv/nzcL/583C/59s
        jf/w9///8Pf//+3x+//OvM//pXeW/KuBn4j/AP8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoGyNTqR4ltOpf533xa7E/p9sjf/fw7z/yqWt/8ml
        rP/jxr7/n2yN/9LF1v++orr/pXWV/KuDn8Wga44rAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ5tjCqhbo5vqH2Zyqh8
        mu+ldpT4o3OS+6Z2lviofZrurYKgxqRxkGqib5EeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+AAP//AAD//wAA//8AAMP/AAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/AA
        AB/wAAAD8AAAA+AAAAfgAAAH4AAAB8AAAA/AAAAPwAAAD8AAAB/AAAAfwAAAH8AAAB/AAAAf4AAAP+AA
        AD/wAAB/8AAAf/gAAP/8AAH//wAH///gP/8=
</value>
  </data>
</root>