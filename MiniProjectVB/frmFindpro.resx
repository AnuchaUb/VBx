<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACga44rn3WYwp90
        mcGebYwqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2uMRaBw
        kPmdgan/nYGp/6Bvj/Sdb5AnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ5t
        j0Sfb5D6nYm2/5yTxP+im8n/o4iu/aFwkZsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACga41DoHCQ+Z2Ktv+ck8T/oZrI/6ehzf+jh679nm6PmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAnmyLQqBwkPmdibX/nJPE/6GayP+noc3/pZK8/59ukPWdb5AnAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJ5ujTqfb4/5nYi0/5yTxP+hmsj/p6HN/6WVv/+fbpD3oG2LSwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACiao8poG+Q+ZyJtv+ck8T/oZrI/6ehzf+lk7z/oG+Q9aFujUEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACqVaoDoGyNTqB5mqafeprkn3GS+Z5xk/qec5P4nnyc4p95
        m6ifa4xFgICABAAAAAAAAAAAAAAAAKB0mbudgKr/nJPE/6KayP+noc3/pZS9/6BvkPWebItCAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACqVaoDn3CPcp50lPSdhqf8mqXH/5i/4v+Yy+7/l9P2/5jK
        7f+Yv+L/mqXH/56Gp/yfc5T3oHKUboCAgAKfbY49n22P+J6Bqv+imsn/p6HN/6WUvf+gb4/2oGuNQwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnW+QJ553l92ciKn9mb/j/5fT9v+X0/b/l9P2/5fT
        9v+X0/b/l9P2/5fT9v+X0/b/l9P2/5i/4v+dh6j9nnaX4qJxkPLOsLz+oXCR+KOJr/qkia/8n26Q9Z5t
        j0QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9qjzCfcZHunKnK/pfT9v+X0/b/l9P2/5fT
        9v+X0/b/l9P2/5fT9v+X0/b/l9P2/5fT9v+X0/b/l9P2/5fT9v+bpsj/oXSU+t7IzP7NsLv+oG2P9Z9t
        jZqga44rAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACcao4kn3CQ8pzF3f+X1ff/l9P2/5fT
        9v+X0/b/mbrb/6KLqf+ieJb/oXOT/6F1k/+ijKn/m6nL/5jQ8v+X0/b/l9P2/5fT9v+ZtNf/onSV+qNz
        kfKgbI87AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqlWqA6B0ldOcssv8m+v//5nh
        +/+X0/b/m6LD/7vQ2f/iy7j/372t/+/Stf/z1rj/8NK2/9q3q/+4kJ3/o3mX/5qz1v+X0/b/l9P2/5fT
        9v+apcb/nneW5KpVqgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgbY1unomm8pvr
        //+b6///m+v//57e9/+5nKn/yKCi//neu//53rv/+d67//neu//53rv/+d67//neu//kxbD/pnqV/52l
        xv+X0/b/l9P2/5fT9v+dhqf9oHCPaQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICABJ5z
        lOuc0un/m+v//5vr//+eqcP/spKk//fbu//z17j/+d67//neu//53rv/+d67//neu//53rv/+d67//ne
        u//v0bb/p3uW/5mz1v+X0/b/l9P2/5m94P+fdJX1qlWqAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACfbYxSnoak75vr//+b6///m+v//8Dj4v/SrKf/99y6//neu//53rv/+d67//neu//53rv/+d67//ne
        u//53rv/+d67//neu//jw7D/oneW/5fO8P+X0/b/l9P2/52FpfyebIxHAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJ9ykp+dss39m+v//5vr//+fiqj/uZKe//neu//53rv/+d67//neu//74sH//urO///t
        0f/+6s3/+OjS//nhwv/53rv/+d67//neu/+4kJ7/mqzN/5fT9v+X0/b/m6XH/555ma0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAn3OU4JzS6P+b6///m+v//7Dk7f/jw7D/+d67//neu//53rv/++PC///t
        0v//7dL//+3S///t0v/28uz/+OfR//neu//53rv/+d67/9y6rP+iiKb/l9P2/5fT9v+ZveD/nnqb4wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfcJD0nN/0/5vr//+b6Pz/s7PA//fcuv/53rv/+d67//ne
        u//+6s7//+3S///t0v//7dL//+3S///t0v/+6s3/+d67//neu//Xs6r/7M60/6N5l/+X0vT/mqzP/5jI
        6/+fc5P4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9tj/yb6Pz/m+j9/56Vsv+fbI3/vJCc//fc
        uv/53rv/+d67//3u2P/68OH//e/Z///t0v//7dL//+3S///s0f/53rv/+d67/72TnP+5jZr/oG2O/5yQ
        sf+cjrD/l9Dz/55xkfsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnm+R9Zzf9P+eka//npu3/6J4
        lf+1h5j/uY2a//neu//448f/8/Py//Pz8//z8/L//e7Y///t0v//7dL//urN//neu//53rv/9tq5/7eL
        mf+fbI3/nIiq/5fP8v+YyOv/nnOT+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfdZTcnNLo/5y+
        1/+b6f3/o46o/9y6rP/Ztqv/+d67//fo1f/z8/P/8/Pz//Pz8//68OH//+3S///t0v/748L/+d67//ne
        u//53rv/99y6/6erxf+X0fP/l9P2/5m94P+eeZvlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBy
        k6ads83+m+v//5vr//+dtc7/uZKe//neu//53rv/+OPH//Py8v/z8/P/8/Py//zu1//+6cz/++LB//ne
        u//53rv/+d67//ndu//Eoab/mcDj/5fT9v+X0/b/m6XH/595m6gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAnmuNTJ6GpfGb6///m+v//5vl+v+idpT/58ey//neu//53rv/+OPH//fo1f/448f/+d67//ne
        u//53rv/+d67//neu//53rv/+d67/7Crvf+clbf/l9P2/5fT9v+dhaX8oG2LSwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACfYIAIn3GS8JvU6v+b6///m+v//57A2P+ofZf/8tW4//neu//53rv/+d67//ne
        u//53rv/+d67//neu//53rv/+d67//PWuP+wip7/mcfo/5fT9v+X0/b/mL/i/551l/KqVaoDAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgb5Buno2r9Jvr//+b6///m+v//5+txv+ofZb/6Mmz//ne
        u//53rv/+d67//neu//53rv/+d67//neu//nyLL/2NjK/52zz/+arc//l9P2/5fT9v+diar9nnOTcQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJlmmQWfcpPdnLfQ+5vr//+b6///m+v//53C
        2v+jepf/upOe/9u4rP/w0bb/89a4/+7Qtf/evK7/69a+/7Ovvf+ej63/m+v//5rg+/+Y1Pb/nKrL/p93
        mN2qVaoDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ5pjyKfcZLwnMbd/5vr
        //+b6///m+v//5vm+/+dtMz/pZCp/6J2lP+hdJP/o3mW/6SOp/+d1uz/m+n+/5zD3P+b6///m+v//5zF
        3f+fcZLvnW+QJwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBs
        jzufcpHynbPO/Zvr//+b6///m+v//5vr//+b6///m+v//5vr//+b6///m+v//5vr//+b6///m+v//5vr
        //+dss39nnGS8ZxuiywAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJxqjiSgcpLenoqo8pzT6v+b6///m+v//5vr//+b6///m+v//5vr//+b6///m+v//5vr
        //+c0un/n4mm8p50lc6ib5EeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKqAgAahbY5sn3KS7p6GpfCcssz9nNDn/5vc8v+c4vf/m9zy/5zQ
        5/+dscz9noWk8J9zk+ygbY1uqlWqAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZZpkFoWyMSaBykqSedZXYn3KS8J9w
        kfaeb5H1oHGS46BykaOfa45YqoCABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////8////+H////A////gP///wH///4D///8B/+A+A/+ADgf+AAAP/AA
        AH/gAAH/wAAB/8AAAf+AAAD/gAAA/wAAAH8AAAB/AAAAfwAAAH8AAAB/AAAAfwAAAH+AAAD/gAAA/8AA
        Af/AAAH/4AAD//AAB//4AA///gA///+A//8=
</value>
  </data>
</root>